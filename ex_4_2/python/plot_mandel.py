"""
Plotting script for Mandel's problem in a quarter domain.

It is assumed that the dictionary "results" (generated by main.py) is available
in the same folder as this file.

Author: Jhabriel Varela
E-mail: jhabriel.varela@uib.no
Date: 03.06.2019
Institution: Porous Media Group [https://pmg.w.uib.no/]
"""

# %% Importing modules
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
import itertools

from matplotlib.ticker import FormatStrFormatter

# %% Loading data
results = pickle.load(open("results.pkl", "rb"))
numer = results["numerical"]
exact = results["analytical"]
g = results["grid"]
d = results["data"]

plot_levels = d["plot_levels"]
time_values = d["time_values"]
F_load = d["applied_load"]
[Nx, Ny] = g.cart_dims      # Number of cells in each direction
a = g.bounding_box()[1][0]  # [m] This is the same as Lx
xc = g.cell_centers[0]      # [m] x-cell-centers

# %% Setting style
sns.set_context("paper")      # set's the scale and size of figures
sns.set_palette("tab10", 10)  # color palette (up to 10 colors)
itertools.cycle(sns.color_palette())  # iterate if > 10 colors are needed

# %% Plot
# Creating subplots windows
fig1 = plt.figure(constrained_layout=False)
gs1 = fig1.add_gridspec(nrows=1, ncols=1, left=0.01, right=0.40)
gs2 = fig1.add_gridspec(nrows=1, ncols=1, left=0.54, right=0.93)
gs3 = fig1.add_gridspec(nrows=1, ncols=1, left=0.95, right=0.99)

# Assingning one frame to each plot
with sns.axes_style("whitegrid"):  # assign the style
    ax1 = fig1.add_subplot(gs1[0, 0])
    ax2 = fig1.add_subplot(gs2[0, 0])
ax3 = fig1.add_subplot(gs3[0, 0])

# Legend Plot (Analytical and numerical)
ax3.plot([], [], "-k", linewidth=1, label="Analytical")
ax3.plot([], [], "ok", label="Numerical", markersize=4)

# Pressure, displacement and legends
for i, level in enumerate(plot_levels):

    color = next(ax1._get_lines.prop_cycler)['color']

    # Pressure
    ax1.plot(xc[:Nx]/a, exact["pressure"][i][:Nx]*a/F_load, color=color)
    ax1.plot(xc[:Nx]/a, numer["pressure"][i][:Nx]*a/F_load,
             "o", markersize=3, color=color)

    # Displacement
    ax2.plot(xc[:Nx]/a, exact["displacement"][i][::2][:Nx]/a, color=color)
    ax2.plot(xc[:Nx]/a,
             numer["displacement"][i][::2][:Nx]/a,
             'o', color=color, markersize=3)

    # Legends
    ax3.plot([], [], color=color, label='t = {} s'.format(time_values[level]))

# Labels and formatting
ax1.tick_params(axis="both", which="major")
ax1.set_xlabel(r"$x\,/\,a$")
ax1.set_ylabel(r"$a\,p\,/\,F$")

ax2.yaxis.set_major_formatter(FormatStrFormatter("%.e"))
ax2.tick_params(axis='both', which='major')
ax2.set_xlabel(r'$x\,/\,a$')
ax2.set_ylabel(r'$u_x\,/\,a$')

ax3.legend(loc="center left", frameon=False)
ax3.axis("off")

plt.show()
fig1.savefig("mandel_results.pdf", bbox_inches='tight')
